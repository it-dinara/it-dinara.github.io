{"version":3,"sources":["AppDragDropDemo.js","serviceWorker.js","index.js"],"names":["Wip","styled","div","_templateObject","Droppable","_templateObject2","TaskHeader","_templateObject3","span","_templateObject4","ContainerDrag","_templateObject5","Header","_templateObject6","AppDragDropDemo","state","tasks","name","category","bgcolor","onDragStart","ev","id","console","log","dataTransfer","setData","onDragOver","preventDefault","onDrop","cat","getData","_this","filter","task","setState","Object","objectSpread","_this2","this","wip","complete","forEach","t","push","react_default","a","createElement","key","e","className","style","backgroundColor","draggable","Component","Boolean","window","location","hostname","match","ReactDOM","render","AppDragDropDemo_AppDragDropDemo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8wCAIA,IAAMA,EAAMC,IAAOC,IAAVC,KASHC,EAAYH,IAAOC,IAAVG,KAkBTC,GARYL,IAAOC,IAAVK,KAQIN,IAAOO,KAAVC,MAMVC,EAAgBT,IAAOC,IAAVS,KAGbC,EAASX,IAAOC,IAAVW,KAOSC,6MACpBC,MAAQ,CACPC,MAAO,CACN,CAACC,KAAM,UAAWC,SAAS,MAAOC,QAAS,UACrC,CAACF,KAAM,QAASC,SAAS,MAAOC,QAAS,QACzC,CAACF,KAAM,MAAOC,SAAS,WAAYC,QAAS,eAIpDC,YAAc,SAACC,EAAIC,GAClBC,QAAQC,IAAI,aAAcF,GAC1BD,EAAGI,aAAaC,QAAQ,KAAMJ,MAG/BK,WAAa,SAACN,GACbA,EAAGO,oBAGJC,OAAS,SAACR,EAAIS,GACb,IAAIR,EAAKD,EAAGI,aAAaM,QAAQ,MAE7Bf,EAAQgB,EAAKjB,MAAMC,MAAMiB,OAAO,SAACC,GAIpC,OAHGA,EAAKjB,OAASK,IAChBY,EAAKhB,SAAWY,GAEVI,IAERF,EAAKG,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACIpB,6EAII,IAAAsB,EAAAC,KACFvB,EAAQ,CACbwB,IAAK,GACLC,SAAU,IAeX,OAZAF,KAAKxB,MAAMC,MAAM0B,QAAQ,SAACC,GACzB3B,EAAM2B,EAAEzB,UAAU0B,KACjBC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAE1B,KACXG,YAAe,SAAC6B,GAAD,OAAOX,EAAKlB,YAAY6B,EAAGN,EAAE1B,OAC5CiC,UAAU,YACVC,MAAO,CAACC,gBAAiBT,EAAExB,SAC3BkC,WAAS,GAERV,EAAE1B,SAKL4B,EAAAC,EAAAC,cAACrC,EAAD,KACCmC,EAAAC,EAAAC,cAACnC,EAAD,yBACAiC,EAAAC,EAAAC,cAAC/C,EAAD,CACA2B,WAAY,SAACsB,GAAD,OAAOX,EAAKX,WAAWsB,IAClCpB,OAAQ,SAACoB,GAAD,OAAOX,EAAKT,OAAOoB,EAAG,SAC9BJ,EAAAC,EAAAC,cAACzC,EAAD,YACCU,EAAMwB,KAERK,EAAAC,EAAAC,cAAC3C,EAAD,CACCuB,WAAY,SAACsB,GAAD,OAAOX,EAAKX,WAAWsB,IACnCpB,OAAQ,SAACoB,GAAD,OAAOX,EAAKT,OAAOoB,EAAG,cAC9BJ,EAAAC,EAAAC,cAACzC,EAAD,kBACCU,EAAMyB,kBA/DiCa,aCnCzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAqBC,SAASC,eAAe,SD2HvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fe894f1c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport styled  from 'styled-components'\r\n\r\nconst Wip = styled.div`\r\n  position: absolute;\r\n  width: 150px;\r\n  height: 100vh;\r\n  left: 0;\r\n  top: 0;\r\n  background-color: #EEEEEE;\r\n  border-right: 1px dotted;\r\n`\r\nconst Droppable = styled.div`\r\n\tposition: absolute;\r\n\twidth: 150px;\r\n\theight: 100vh;\r\n\tright: 0;\r\n\ttop: 0;\r\n\tbackground-color: #9E9E9E;\r\n\tborder-left: 1px dotted;\r\n`\r\n\r\nconst Draggable = styled.div`\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground-color: yellow;\r\n\tmargin: 5px auto;\r\n\tline-height: 5em;\r\n`\r\n\r\nconst TaskHeader = styled.span`\r\n\tdisplay: inline-block;\r\n\tbackground-color: skyblue;\r\n\twidth: 100%;\r\n`\r\n\r\nconst ContainerDrag = styled.div`\r\n\ttext-align: center;\r\n`\r\nconst Header = styled.div`\r\n\tdisplay: inline-block;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tbackground-color: #E0E0E0;\r\n\twidth: 100%;\r\n`\r\nexport default class AppDragDropDemo extends Component {\r\n\tstate = {\r\n\t\ttasks: [\r\n\t\t\t{name: 'Angular', category:'wip', bgcolor: 'yellow',},\r\n\t        {name: 'React', category:'wip', bgcolor: 'pink',},\r\n\t        {name: 'Vue', category:'complete', bgcolor: 'skyblue',},\r\n\t\t]\r\n\t}\r\n\r\n\tonDragStart = (ev, id) => {\r\n\t\tconsole.log('dragstart:', id);\r\n\t\tev.dataTransfer.setData('id', id); //id = t.name\r\n\t}\r\n\r\n\tonDragOver = (ev) => {\r\n\t\tev.preventDefault();\r\n\t}\r\n\r\n\tonDrop = (ev, cat) => {\r\n\t\tlet id = ev.dataTransfer.getData('id');\r\n\r\n\t\tlet tasks = this.state.tasks.filter((task) => {\r\n\t\t\tif(task.name === id) {\r\n\t\t\t\ttask.category = cat;\r\n\t\t\t}\r\n\t\t\treturn task;\r\n\t\t});\r\n\t\tthis.setState({\r\n\t\t\t...tasks\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst tasks = {\r\n\t\t\twip: [],\r\n\t\t\tcomplete: []\r\n\t\t}\r\n\r\n\t\tthis.state.tasks.forEach((t) => {\r\n\t\t\ttasks[t.category].push(\r\n\t\t\t\t<div key={t.name}\r\n\t\t\t\t\tonDragStart = {(e) => this.onDragStart(e, t.name)}\r\n\t\t\t\t\tclassName=\"draggable\"\r\n\t\t\t\t\tstyle={{backgroundColor: t.bgcolor}}\r\n\t\t\t\t\tdraggable\r\n\t\t\t\t>\r\n\t\t\t\t\t{t.name}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<ContainerDrag>\r\n\t\t\t\t<Header>Drag & Drop Demo</Header>\r\n\t\t\t\t<Wip\r\n\t\t\t\tonDragOver={(e) => this.onDragOver(e)}\r\n\t\t\t\t\tonDrop={(e) => this.onDrop(e, 'wip')}>\r\n\t\t\t\t\t<TaskHeader>wip</TaskHeader>\r\n\t\t\t\t\t{tasks.wip}\r\n\t\t\t\t</Wip>\r\n\t\t\t\t<Droppable \r\n\t\t\t\t\tonDragOver={(e) => this.onDragOver(e)}\r\n\t\t\t\t\tonDrop={(e) => this.onDrop(e, 'complete')}>\r\n\t\t\t\t\t<TaskHeader>completed</TaskHeader>\r\n\t\t\t\t\t{tasks.complete}\r\n\t\t\t\t</Droppable>\r\n\t\t\t</ContainerDrag>\r\n\t\t);\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppDragDropDemo from './AppDragDropDemo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppDragDropDemo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}