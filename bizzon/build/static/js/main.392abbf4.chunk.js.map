{"version":3,"sources":["axios.js","components/Title/Title.js","components/Text/Text.js","components/Post/Post.js","components/Picture/Picture.js","components/Carousel/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","interceptors","request","use","console","log","error","Promise","reject","response","Title","props","Box","fontSize","p","fontWeight","lineHeight","style","textTransform","title","Text","textAlign","text","Post","m","Picture","width","src","url","Carousel","state","posts","photos","get","then","data","slice","setState","catch","this","map","item","i","key","body","content","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","arrows","height","elem","Math","random","bgcolor","color","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAEMA,E,OAAWC,EAAMC,OAAO,CAC7BC,QAAS,yCAGVH,EAASI,aAAaC,QAAQC,KAAI,SAAAD,GAEjC,OADAE,QAAQC,IAAIH,GACLA,KACL,SAAAI,GAEF,OADAF,QAAQC,IAAIC,GACLC,QAAQC,OAAOF,MAGvBT,EAASI,aAAaQ,SAASN,KAAI,SAAAM,GAElC,OADAL,QAAQC,IAAII,GACLA,KACL,SAAAH,GAEF,OADAF,QAAQC,IAAIC,GACLC,QAAQC,OAAOF,MAIRT,Q,iBCbAa,G,YAND,SAACC,GAAD,OACb,kBAACC,EAAA,EAAD,CAAKC,SAAS,OAAOC,EAAE,cAAcC,WAAW,MAAMC,WAAW,IAAIC,MAAO,CAACC,cAAe,cAC1FP,EAAMQ,SCIMC,EANF,SAACT,GAAD,OACZ,kBAACC,EAAA,EAAD,CAAKC,SAAS,OAAOQ,UAAU,OAAOP,EAAE,QACtCH,EAAMW,OCQMC,EATF,SAACZ,GACb,OACC,kBAACC,EAAA,EAAD,CAAKY,EAAE,QACN,kBAAC,EAAD,CAAOL,MAAOR,EAAMQ,QACpB,kBAAC,EAAD,CAAMG,KAAMX,EAAMW,S,iBCGNG,EANC,SAACd,GAAD,OACf,kBAACC,EAAA,EAAD,CAAKc,MAAM,QAAQF,EAAE,UACpB,kBAAC,IAAD,CAAOG,IAAKhB,EAAMiB,QCiFLC,E,2MA7EdC,MAAQ,CACPC,MAAO,GACPC,OAAQ,I,mFAGa,IAAD,OACpBlC,EAAMmC,IAAI,UACRC,MAAK,SAAAzB,GACL,IAAMsB,EAAQtB,EAAS0B,KAAKC,MAAM,EAAG,IACrC,EAAKC,SAAS,CAACN,MAAOA,OAEtBO,OAAM,SAAAhC,GACN,EAAK+B,SAAS,CAAC/B,OAAO,OAGxBR,EAAMmC,IAAI,WACRC,MAAK,SAAAzB,GACL,IAAMuB,EAASvB,EAAS0B,KAAKC,MAAM,EAAG,IACtC,EAAKC,SAAS,CAACL,OAAQA,OAEvBM,OAAM,SAAAhC,GACN,EAAK+B,SAAS,CAAC/B,OAAO,S,+BAKxB,IAWMyB,EAAQQ,KAAKT,MAAMC,MAAMS,KAAI,SAACC,EAAMC,GACzC,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLvB,MAAOsB,EAAKtB,MACZG,KAAMmB,EAAKG,UAKRZ,EAASO,KAAKT,MAAME,OAAOQ,KAAI,SAACC,EAAMC,GAC3C,OACC,kBAAC,EAAD,CACCC,IAAKF,EAAKb,IACVA,IAAKa,EAAKb,SAKTiB,EAAU,kBAAC,IA9BE,CACfC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,UAAU,EACVC,QAAQ,EACRC,OAAQ,QAuBNrB,EAAOQ,KAAI,SAACc,EAAMZ,GAAP,OACX,kBAAC9B,EAAA,EAAD,CAAK+B,IAAKY,KAAKC,UACd,kBAAC5C,EAAA,EAAD,CAAK6C,QAAQ,UAAU3C,EAAE,QACvBwC,EACAvB,EAAMW,SAQb,OAHIH,KAAKT,MAAMxB,QACduC,EAAU,kBAACjC,EAAA,EAAD,CAAKC,SAAS,OAAO6C,MAAM,OAA3B,yBAGV,kBAAC9C,EAAA,EAAD,CAAKc,MAAM,QAAQF,EAAE,aACnBqB,O,GAxEkBc,aCERC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCQNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.392abbf4.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://jsonplaceholder.typicode.com'\r\n})\r\n\r\ninstance.interceptors.request.use(request => {\r\n\tconsole.log(request)\r\n\treturn request;\r\n}, error => {\r\n\tconsole.log(error);\r\n\treturn Promise.reject(error)\r\n});\r\n\r\ninstance.interceptors.response.use(response => {\r\n\tconsole.log(response)\r\n\treturn response;\r\n}, error => {\r\n\tconsole.log(error);\r\n\treturn Promise.reject(error)\r\n});\r\n\r\n\r\nexport default instance;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nconst Title = (props) => (\r\n\t<Box fontSize='30px' p='25px 0 15px' fontWeight='800' lineHeight='1' style={{textTransform: 'uppercase'}}>\r\n\t\t{props.title}\r\n\t</Box>\r\n)\r\n\r\nexport default Title;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nconst Text = (props) => (\r\n\t<Box fontSize='20px' textAlign='left' p='20px'>\r\n\t\t{props.text}\r\n\t</Box>\r\n)\r\n\r\nexport default Text;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Title from '../Title/Title';\r\nimport Text from '../Text/Text';\r\n\r\nconst Post = (props) => {\r\n\treturn (\r\n\t\t<Box m='10px'>\r\n\t\t\t<Title title={props.title}/>\r\n\t\t\t<Text text={props.text}/>\r\n\t\t</Box>\r\n\t)\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport Image from 'material-ui-image'\r\n\r\n\r\nconst Picture = (props) => (\r\n\t<Box width='200px' m='0 auto'>\r\n\t\t<Image src={props.url}/>\r\n\t</Box>\r\n)\r\n\r\nexport default Picture;","import React, { Component } from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport axios from '../../axios';\r\nimport Slider from 'react-slick'\r\nimport \"slick-carousel/slick/slick.css\"; \r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nimport Post from '../Post/Post';\r\nimport Picture from '../Picture/Picture';\r\n\r\n\r\nclass Carousel extends Component {\r\n\tstate = {\r\n\t\tposts: [],\r\n\t\tphotos: [],\r\n\t}\r\n\r\n\tcomponentDidMount () {\r\n\t\taxios.get('/posts')\r\n\t\t\t.then(response => {\r\n\t\t\t\tconst posts = response.data.slice(0, 10);\r\n\t\t\t\tthis.setState({posts: posts});\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tthis.setState({error: true});\r\n\t\t\t})\r\n\r\n\t\taxios.get('/photos')\r\n\t\t\t.then(response => {\r\n\t\t\t\tconst photos = response.data.slice(0, 10);\r\n\t\t\t\tthis.setState({photos: photos});\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tthis.setState({error: true});\r\n\t\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst settings = {\r\n\t\t  dots: false,\r\n\t\t  infinite: true,\r\n\t\t  speed: 300,\r\n\t\t  slidesToShow: 1,\r\n\t\t  slidesToScroll: 1,\r\n\t\t  autoplay: true,\r\n\t\t  arrows: true,\r\n\t\t  height: 'auto'\r\n\t\t};\r\n\r\n\t\tconst posts = this.state.posts.map((item, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Post \r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\ttitle={item.title}\r\n\t\t\t\t\ttext={item.body}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t});\r\n\r\n\t\tconst photos = this.state.photos.map((item, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Picture\r\n\t\t\t\t\tkey={item.url}\r\n\t\t\t\t\turl={item.url}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t});\r\n\r\n\t\tlet content = <Slider {...settings}>\r\n\t\t\t\t\t{photos.map((elem, i) => (\r\n\t\t\t\t\t\t<Box key={Math.random()}>\r\n\t\t\t\t\t\t\t<Box bgcolor='#e0e0e0' p='20px'>\r\n\t\t\t\t\t\t\t\t{elem}\r\n\t\t\t\t\t\t\t\t{posts[i]}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Slider>\r\n\t\tif (this.state.error) {\r\n\t\t\tcontent = <Box fontSize='20px' color='red'>Something went wrong</Box>\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Box width='500px' m='10px auto'>\r\n\t\t\t\t{content}\r\n\t\t\t</Box>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Carousel;","import React from 'react';\r\nimport './App.css';\r\nimport Carousel from './components/Carousel/Carousel'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Carousel/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import axios from 'axios';\n\n// axios.defaults.baseURL = 'https://jsonplaceholder.typicode.com'\n\n// axios.interceptors.request.use(request => {\n// \tconsole.log(request)\n// \treturn request;\n// }, error => {\n// \tconsole.log(error);\n// \treturn Promise.reject(error)\n// });\n\n// axios.interceptors.response.use(response => {\n// \tconsole.log(response)\n// \treturn response;\n// }, error => {\n// \tconsole.log(error);\n// \treturn Promise.reject(error)\n// });\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}